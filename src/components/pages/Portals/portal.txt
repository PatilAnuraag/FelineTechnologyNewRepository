import { useEffect, useRef, useState } from "react";
import { createPortal } from "react-dom";

export default function Portal(props) {
  const [container, setContainer] = useState(null);
  const newWindow = useRef(window);

  function copyStyles(sourceDoc, targetDoc) {
    Array.from(sourceDoc.styleSheets).filter(
      (styleSheet) => !styleSheet.href || styleSheet.href.startsWith(window.location.origin)
    ).forEach((styleSheet) => {
      if (styleSheet.cssRules) {
        // for <style> elements
        const newStyleEl = sourceDoc.createElement("style");

        Array.from(styleSheet.cssRules).forEach((cssRule) => {
          // write the text of each rule into the body of the style element
          newStyleEl.appendChild(sourceDoc.createTextNode(cssRule.cssText));
        });

        targetDoc.head.appendChild(newStyleEl);
      } else if (styleSheet.href) {
        // for <link> elements loading CSS from a URL
        const newLinkEl = sourceDoc.createElement("link");

        newLinkEl.rel = "stylesheet";
        newLinkEl.href = styleSheet.href;
        targetDoc.head.appendChild(newLinkEl);
      }
    });
  }

  useEffect(() => {
    const div = document.createElement("div");
    setContainer(div);
  }, []);

  useEffect(() => {
    if (container) {
      newWindow.current = window.open(
        "",
        "",
        "width=600,height=400,left=200,top=200"
      );
      
      copyStyles(document, newWindow.current.document);
      newWindow.current.document.body.appendChild(container);

      const curWindow = newWindow.current;
      return () => {
        console.log(props.setShowTrelloPortal);
        curWindow.close();
      };
    }
  }, [container]);

  return container && createPortal(props.children, container);
}
